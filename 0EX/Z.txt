1. Основные алгоритмические конструкции:
   - Последовательность
   - Ветвление (if, switch)
   - Цикл (while, do…while, for)

2. Структура программы на C#:
   using …;
   namespace … {
       class Program {
           static void Main(string[] args) { … }
       }
   }

3. Переменная и константа:
   - Переменная — меняемое значение в памяти.
   - Константа (const) — неизменяемое значение.

4. Тип данных:
   Определяет возможные значения и операции (int, double, string, bool).

5. Консольный ввод:
   string s = Console.ReadLine();
   int x = int.Parse(Console.ReadLine());

6. Консольный вывод:
   Console.WriteLine("текст");
   Console.Write(value);

7. Присваивание:
   variable = expression;

8. Полный if:
   if (условие) { … } else { … }

9. Неполный if:
   if (условие) { … }

10. switch:
    switch (expr) { case v: …; break; default: …; }

11. Цикл while:
    while (условие) { … }

12. Цикл do…while:
    do { … } while (условие);

13. Цикл for:
    for (int i = 0; i < n; i++) { … }

14. Массив и массив объектов:
    int[] a = new int[n];
    MyClass[] arr = new MyClass[n];

15. ООП:
    Программирование через объекты с данными и методами.

16. Принципы ООП:
    - Инкапсуляция: сокрытие данных.
    - Наследование: повторное использование.
    - Полиморфизм: разные реализации.
    - Абстракция: выделение сути.

17. Класс:
    Шаблон объекта.

18. Объект класса:
    Конкретный экземпляр класса.

19. Описать объект:
    Создать описание через класс.

20. Создать объект:
    new ClassName(args);

21. Этапы создания объекта:
    описание → компиляция → new → инициализация

22. Экземпляр класса:
    Объект, созданный по классу.

23. Структура класса:
    class Name { поля; свойства; методы; }

24. Поле:
    Переменная в классе.

25. Модификаторы доступа:
    public, private, protected, internal

26. Область видимости:
    Зависит от места объявления.

27. Метод:
    Функция внутри класса.

28. Описание метода:
    ReturnType Name(params) { … }

29. Доступ к методу:
    По модификатору (например, public).

30. Конструктор:
    Метод с именем класса без возвращаемого типа.

31. Особенности конструктора:
    - Имя = имя класса
    - Нет возвращаемого типа

32. Назначение конструктора:
    Инициализация объекта.

33. Запись конструктора:
    public ClassName(type p) { … }

34. Виды конструкторов:
    Без параметров, с параметрами, статический

35. Интерфейс:
    Контракт с методами без реализации.

36. Объявление интерфейса:
    interface IName { void Method(); }

37. Реализация интерфейса:
    class C : IName { public void Method() { … } }

38. Особенности интерфейсов:
    Нет реализации, множественное наследование.

39. Интерфейс vs абстрактный класс:
    Интерфейс — только сигнатуры. Абстрактный — может иметь реализацию.

40. Статические элементы:
    Классы, методы, поля, свойства, конструкторы.

41. Статический класс:
    static class Name — все члены static, нельзя создать объект.

42. Свойство:
    Обёртка над полем с get/set.

43. Свойство (синтаксис):
    public Type Name { get; set; }

44. Массив объектов:
    ClassName[] arr = new ClassName[n];

45. Создание массива объектов:
    for (int i = 0; i < n; i++) arr[i] = new ClassName();

46. Main():
    Точка входа в программу.

47. Структура:
    Значимый тип, похож на класс.

48. Синтаксис структуры:
    struct Name { public Type Field; }

49. Этапы использования структуры:
    описание → объявление → конструктор → использование

50. Отличия структур и классов:
    Структуры — в стеке, классы — в куче.

51. Перечисление:
    enum Name { A = 1, B = 2 }

52. Объявление enum:
    enum Name { … }

53. Наследование:
    Передача членов базового класса потомку.

54. Базовый и производный классы:
    Base — общие члены, Derived — расширяет.

55. Синтаксис потомка:
    class Derived : Base { … }

56. Конструктор потомка:
    public Derived(args) : base(args) { … }

57. Виртуальный метод:
    virtual — допускает override.

58. virtual (пример):
    public virtual void Method() { … }

59. Переопределение:
    override: public override void Method() { … }

60. Виды наследования:
    Одноуровневое, многоуровневое, через интерфейс

61. Абстрактный класс:
    abstract class Name — нельзя создать объект.

62. Особенности абстрактного класса:
    Может иметь реализацию и абстрактные члены.

63. Объявление абстрактного класса:
    abstract class Name { … }

64. Абстрактный метод:
    public abstract void Method();

65. Абстрактный vs виртуальный:
    Абстрактный — без реализации, обязательно переопределять.
    Виртуальный — с реализацией, можно переопределить.

66. Обобщение (generics):
    class C<T> { … }

67. Делегат:
    Тип, указывающий на метод.

68. Описание делегата:
    delegate ReturnType Name(params);

69. Создание делегата:
    Name del = Method;
    del(args);